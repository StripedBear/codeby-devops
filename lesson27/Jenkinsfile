pipeline {
    agent any
    tools {
        maven 'Maven-3'
    }
    environment {
        SONARQUBE_URL = 'http://192.168.200.120:9000'
        SONAR_TOKEN = credentials('sonar-token')
    }
    stages {
        stage('Build and SonarQube Analysis') {
            parallel {
                stage('HelloWorld') {
                    steps {
                        dir('lesson27/hello-world') {
                            echo 'Building HelloWorld...'
                            sh 'pwd'
                            withSonarQubeEnv('sonar'){
                               sh 'mvn clean package sonar:sonar ' +
                                   '-Dsonar.projectKey=hello-world ' +
                                   '-Dsonar.host.url=$SONARQUBE_URL ' +
                                   '-Dsonar.login=$SONAR_TOKEN'
                            }
                        }
                    }
                }
                stage('HelloJenkins') {
                    steps {
                        dir('lesson27/hello-jenkins') {
                            echo 'Building HelloJenkins...'
                            withSonarQubeEnv('sonar'){
                                sh 'mvn clean package sonar:sonar ' +
                                    '-Dsonar.projectKey=hello-jenkins ' +
                                    '-Dsonar.host.url=$SONARQUBE_URL ' +
                                    '-Dsonar.login=$SONAR_TOKEN'
                            }
                        }
                    }
                }
                stage('HelloDevOps') {
                    steps {
                        dir('lesson27/hello-devops') {
                            echo 'Building HelloDevOps...'
                            withSonarQubeEnv('sonar'){
                                sh 'mvn clean package sonar:sonar ' +
                                   '-Dsonar.projectKey=hello-devops ' +
                                   '-Dsonar.host.url=$SONARQUBE_URL ' +
                                   '-Dsonar.login=$SONAR_TOKEN'
                            }
                            
                        }
                    }
                }
            }
        }
        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
}
